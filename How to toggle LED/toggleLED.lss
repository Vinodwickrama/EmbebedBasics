
toggleLED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  00000134  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000134  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000046  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000000c6  00000000  00000000  0000019a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000094  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000000b5  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  000003ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000008b  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 4c 00 	jmp	0x98	; 0x98 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 5e 00 	jmp	0xbc	; 0xbc <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
#include <avr/interrupt.h>
void initInterrupt(void);
unsigned int state=0;

void main(void){
	DDRC=0x0f;
  7c:	8f e0       	ldi	r24, 0x0F	; 15
  7e:	84 bb       	out	0x14, r24	; 20
	}
	
}

void initInterrupt(void){
	MCUCR=(1<<ISC01)|(1<<ISC00); 
  80:	83 e0       	ldi	r24, 0x03	; 3
  82:	85 bf       	out	0x35, r24	; 53
	GICR=(1<<INT0);
  84:	80 e4       	ldi	r24, 0x40	; 64
  86:	8b bf       	out	0x3b, r24	; 59
	sei();
  88:	78 94       	sei
  8a:	ff cf       	rjmp	.-2      	; 0x8a <main+0xe>

0000008c <initInterrupt>:
	}
	
}

void initInterrupt(void){
	MCUCR=(1<<ISC01)|(1<<ISC00); 
  8c:	83 e0       	ldi	r24, 0x03	; 3
  8e:	85 bf       	out	0x35, r24	; 53
	GICR=(1<<INT0);
  90:	80 e4       	ldi	r24, 0x40	; 64
  92:	8b bf       	out	0x3b, r24	; 59
	sei();
  94:	78 94       	sei
}
  96:	08 95       	ret

00000098 <__vector_1>:



ISR(INT0_vect){
  98:	1f 92       	push	r1
  9a:	0f 92       	push	r0
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	0f 92       	push	r0
  a0:	11 24       	eor	r1, r1
  a2:	8f 93       	push	r24
  a4:	9f 93       	push	r25
	PORTC=(1<<PC3)^PORTC;
  a6:	85 b3       	in	r24, 0x15	; 21
  a8:	98 e0       	ldi	r25, 0x08	; 8
  aa:	89 27       	eor	r24, r25
  ac:	85 bb       	out	0x15, r24	; 21
  ae:	9f 91       	pop	r25
  b0:	8f 91       	pop	r24
  b2:	0f 90       	pop	r0
  b4:	0f be       	out	0x3f, r0	; 63
  b6:	0f 90       	pop	r0
  b8:	1f 90       	pop	r1
  ba:	18 95       	reti

000000bc <_exit>:
  bc:	f8 94       	cli

000000be <__stop_program>:
  be:	ff cf       	rjmp	.-2      	; 0xbe <__stop_program>
