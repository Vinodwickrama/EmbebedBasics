
myTime.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000090  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000002f  00000000  00000000  00000104  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000c7  00000000  00000000  00000133  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000092  00000000  00000000  000001fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000a2  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  00000330  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000007d  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000018  00000000  00000000  000003ed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <util/delay.h>
void iniTime(void);

void main(void){
	
	DDRC = 0xff;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	84 bb       	out	0x14, r24	; 20
	}
}


void iniTime(void){
	TCCR0=TCCR0|(1<<CS00)|(1<<CS02);
  70:	83 b7       	in	r24, 0x33	; 51
  72:	85 60       	ori	r24, 0x05	; 5
  74:	83 bf       	out	0x33, r24	; 51
	TCNT0=0;
  76:	12 be       	out	0x32, r1	; 50
  78:	ff cf       	rjmp	.-2      	; 0x78 <main+0xc>

0000007a <iniTime>:
	}
}


void iniTime(void){
	TCCR0=TCCR0|(1<<CS00)|(1<<CS02);
  7a:	83 b7       	in	r24, 0x33	; 51
  7c:	85 60       	ori	r24, 0x05	; 5
  7e:	83 bf       	out	0x33, r24	; 51
	TCNT0=0;
  80:	12 be       	out	0x32, r1	; 50
}
  82:	08 95       	ret

00000084 <ISR>:

ISR(TIMER0_COMP){
	
			PORTC ^= 0xff;  
  84:	85 b3       	in	r24, 0x15	; 21
  86:	80 95       	com	r24
  88:	85 bb       	out	0x15, r24	; 21
			
}
  8a:	08 95       	ret

0000008c <_exit>:
  8c:	f8 94       	cli

0000008e <__stop_program>:
  8e:	ff cf       	rjmp	.-2      	; 0x8e <__stop_program>
