
myLCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000042  00800060  000003d4  00000468  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  008000a2  008000a2  000004aa  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000004aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000099  00000000  00000000  000004ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006dd  00000000  00000000  00000563  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001e9  00000000  00000000  00000c40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004d7  00000000  00000000  00000e29  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  00001300  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000015e  00000000  00000000  00001390  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002ed  00000000  00000000  000014ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000017db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 8b 01 	jmp	0x316	; 0x316 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ed       	ldi	r30, 0xD4	; 212
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 3a       	cpi	r26, 0xA2	; 162
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 ea       	ldi	r26, 0xA2	; 162
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 3a       	cpi	r26, 0xA4	; 164
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 67 01 	call	0x2ce	; 0x2ce <main>
  8a:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=(~(0x0f<<LCD_DATA_POS));
  92:	84 b3       	in	r24, 0x14	; 20
  94:	8f 70       	andi	r24, 0x0F	; 15
  96:	84 bb       	out	0x14, r24	; 20

	//change LCD mode
	SET_RW();		//Read mode
  98:	c1 9a       	sbi	0x18, 1	; 24
	CLEAR_RS();		//Read status
  9a:	c0 98       	cbi	0x18, 0	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	8a 95       	dec	r24
  a0:	f1 f7       	brne	.-4      	; 0x9e <LCDBusyLoop+0xc>

	
	do
	{

		SET_E();
  a2:	21 e0       	ldi	r18, 0x01	; 1
  a4:	c2 9a       	sbi	0x18, 2	; 24
  a6:	82 2f       	mov	r24, r18
  a8:	8a 95       	dec	r24
  aa:	f1 f7       	brne	.-4      	; 0xa8 <LCDBusyLoop+0x16>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=(LCD_DATA_PIN>>LCD_DATA_POS);
  ac:	83 b3       	in	r24, 0x13	; 19
		status=status<<4;
  ae:	80 7f       	andi	r24, 0xF0	; 240
  b0:	92 2f       	mov	r25, r18
  b2:	9a 95       	dec	r25
  b4:	f1 f7       	brne	.-4      	; 0xb2 <LCDBusyLoop+0x20>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
  b6:	c2 98       	cbi	0x18, 2	; 24
  b8:	92 2f       	mov	r25, r18
  ba:	9a 95       	dec	r25
  bc:	f1 f7       	brne	.-4      	; 0xba <LCDBusyLoop+0x28>
		_delay_us(1);	//tEL

		SET_E();
  be:	c2 9a       	sbi	0x18, 2	; 24
  c0:	92 2f       	mov	r25, r18
  c2:	9a 95       	dec	r25
  c4:	f1 f7       	brne	.-4      	; 0xc2 <LCDBusyLoop+0x30>
		_delay_us(0.5);

		temp=(LCD_DATA_PIN>>LCD_DATA_POS);
  c6:	93 b3       	in	r25, 0x13	; 19
  c8:	92 2f       	mov	r25, r18
  ca:	9a 95       	dec	r25
  cc:	f1 f7       	brne	.-4      	; 0xca <LCDBusyLoop+0x38>
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
  ce:	c2 98       	cbi	0x18, 2	; 24
  d0:	92 2f       	mov	r25, r18
  d2:	9a 95       	dec	r25
  d4:	f1 f7       	brne	.-4      	; 0xd2 <LCDBusyLoop+0x40>
		_delay_us(1);	//tEL
	}while(busy);
  d6:	87 fd       	sbrc	r24, 7
  d8:	e5 cf       	rjmp	.-54     	; 0xa4 <LCDBusyLoop+0x12>

	CLEAR_RW();		//write mode
  da:	c1 98       	cbi	0x18, 1	; 24
	//Change Port to output
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
  dc:	84 b3       	in	r24, 0x14	; 20
  de:	80 6f       	ori	r24, 0xF0	; 240
  e0:	84 bb       	out	0x14, r24	; 20

}
  e2:	08 95       	ret

000000e4 <LCDByte>:


};

void LCDByte(uint8_t c,uint8_t isdata)
{
  e4:	38 2f       	mov	r19, r24
uint8_t temp;

hn=c>>4;
ln=(c & 0x0F);

if(isdata==0)
  e6:	66 23       	and	r22, r22
  e8:	11 f4       	brne	.+4      	; 0xee <LCDByte+0xa>
	CLEAR_RS();
  ea:	c0 98       	cbi	0x18, 0	; 24
  ec:	01 c0       	rjmp	.+2      	; 0xf0 <LCDByte+0xc>
else
	SET_RS();
  ee:	c0 9a       	sbi	0x18, 0	; 24
  f0:	21 e0       	ldi	r18, 0x01	; 1
  f2:	82 2f       	mov	r24, r18
  f4:	8a 95       	dec	r24
  f6:	f1 f7       	brne	.-4      	; 0xf4 <LCDByte+0x10>

_delay_us(0.500);		//tAS

SET_E();
  f8:	c2 9a       	sbi	0x18, 2	; 24

//Send high nibble

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((hn<<LCD_DATA_POS));
  fa:	85 b3       	in	r24, 0x15	; 21
  fc:	93 2f       	mov	r25, r19
  fe:	90 7f       	andi	r25, 0xF0	; 240
 100:	8f 70       	andi	r24, 0x0F	; 15
 102:	98 2b       	or	r25, r24
LCD_DATA_PORT=temp;
 104:	95 bb       	out	0x15, r25	; 21
 106:	82 2f       	mov	r24, r18
 108:	8a 95       	dec	r24
 10a:	f1 f7       	brne	.-4      	; 0x108 <LCDByte+0x24>

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
 10c:	c2 98       	cbi	0x18, 2	; 24
 10e:	82 2f       	mov	r24, r18
 110:	8a 95       	dec	r24
 112:	f1 f7       	brne	.-4      	; 0x110 <LCDByte+0x2c>

_delay_us(1);

//Send the lower nibble
SET_E();
 114:	c2 9a       	sbi	0x18, 2	; 24

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((ln<<LCD_DATA_POS));
 116:	85 b3       	in	r24, 0x15	; 21
 118:	32 95       	swap	r19
 11a:	30 7f       	andi	r19, 0xF0	; 240
 11c:	8f 70       	andi	r24, 0x0F	; 15
 11e:	83 2b       	or	r24, r19

LCD_DATA_PORT=temp;
 120:	85 bb       	out	0x15, r24	; 21
 122:	82 2f       	mov	r24, r18
 124:	8a 95       	dec	r24
 126:	f1 f7       	brne	.-4      	; 0x124 <LCDByte+0x40>

_delay_us(1);			//tEH

//SEND

CLEAR_E();
 128:	c2 98       	cbi	0x18, 2	; 24
 12a:	2a 95       	dec	r18
 12c:	f1 f7       	brne	.-4      	; 0x12a <LCDByte+0x46>

_delay_us(1);			//tEL

LCDBusyLoop();
 12e:	0e 94 49 00 	call	0x92	; 0x92 <LCDBusyLoop>
}
 132:	08 95       	ret

00000134 <LCDWriteString>:
	
	LCDGotoXY(0,0);

}
void LCDWriteString(const char *msg)
{
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
 138:	ec 01       	movw	r28, r24
 13a:	10 c0       	rjmp	.+32     	; 0x15c <LCDWriteString+0x28>

	*****************************************************************/
 while(*msg!='\0')
 {
 	//Custom Char Support
	if(*msg=='%')
 13c:	85 32       	cpi	r24, 0x25	; 37
 13e:	51 f4       	brne	.+20     	; 0x154 <LCDWriteString+0x20>
	{
		msg++;
 140:	21 96       	adiw	r28, 0x01	; 1
		int8_t cc=*msg-'0';
 142:	88 81       	ld	r24, Y
 144:	80 53       	subi	r24, 0x30	; 48

		if(cc>=0 && cc<=7)
 146:	88 30       	cpi	r24, 0x08	; 8
 148:	28 f0       	brcs	.+10     	; 0x154 <LCDWriteString+0x20>
		{
			LCDData(cc);
		}
		else
		{
			LCDData('%');
 14a:	85 e2       	ldi	r24, 0x25	; 37
 14c:	61 e0       	ldi	r22, 0x01	; 1
 14e:	0e 94 72 00 	call	0xe4	; 0xe4 <LCDByte>
			LCDData(*msg);
 152:	88 81       	ld	r24, Y
		}
	}
	else
	{
		LCDData(*msg);
 154:	61 e0       	ldi	r22, 0x01	; 1
 156:	0e 94 72 00 	call	0xe4	; 0xe4 <LCDByte>
	}
	msg++;
 15a:	21 96       	adiw	r28, 0x01	; 1
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
 15c:	88 81       	ld	r24, Y
 15e:	88 23       	and	r24, r24
 160:	69 f7       	brne	.-38     	; 0x13c <LCDWriteString+0x8>
	{
		LCDData(*msg);
	}
	msg++;
 }
}
 162:	df 91       	pop	r29
 164:	cf 91       	pop	r28
 166:	08 95       	ret

00000168 <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
 168:	ef 92       	push	r14
 16a:	ff 92       	push	r15
 16c:	0f 93       	push	r16
 16e:	1f 93       	push	r17
 170:	df 93       	push	r29
 172:	cf 93       	push	r28
 174:	00 d0       	rcall	.+0      	; 0x176 <LCDWriteInt+0xe>
 176:	00 d0       	rcall	.+0      	; 0x178 <LCDWriteInt+0x10>
 178:	0f 92       	push	r0
 17a:	cd b7       	in	r28, 0x3d	; 61
 17c:	de b7       	in	r29, 0x3e	; 62
 17e:	9c 01       	movw	r18, r24
 180:	8b 01       	movw	r16, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 182:	fe 01       	movw	r30, r28
 184:	31 96       	adiw	r30, 0x01	; 1
 186:	85 e0       	ldi	r24, 0x05	; 5
 188:	df 01       	movw	r26, r30
 18a:	1d 92       	st	X+, r1
 18c:	8a 95       	dec	r24
 18e:	e9 f7       	brne	.-6      	; 0x18a <LCDWriteInt+0x22>
 190:	fe 01       	movw	r30, r28
 192:	35 96       	adiw	r30, 0x05	; 5
 194:	0d c0       	rjmp	.+26     	; 0x1b0 <LCDWriteInt+0x48>
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
 196:	c9 01       	movw	r24, r18
 198:	6a e0       	ldi	r22, 0x0A	; 10
 19a:	70 e0       	ldi	r23, 0x00	; 0
 19c:	0e 94 c1 01 	call	0x382	; 0x382 <__divmodhi4>
 1a0:	80 83       	st	Z, r24
	val=val/10;
 1a2:	c9 01       	movw	r24, r18
 1a4:	6a e0       	ldi	r22, 0x0A	; 10
 1a6:	70 e0       	ldi	r23, 0x00	; 0
 1a8:	0e 94 c1 01 	call	0x382	; 0x382 <__divmodhi4>
 1ac:	9b 01       	movw	r18, r22
 1ae:	31 97       	sbiw	r30, 0x01	; 1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 1b0:	21 15       	cp	r18, r1
 1b2:	31 05       	cpc	r19, r1
 1b4:	81 f7       	brne	.-32     	; 0x196 <LCDWriteInt+0x2e>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 1b6:	bf ef       	ldi	r27, 0xFF	; 255
 1b8:	0f 3f       	cpi	r16, 0xFF	; 255
 1ba:	1b 07       	cpc	r17, r27
 1bc:	79 f4       	brne	.+30     	; 0x1dc <LCDWriteInt+0x74>
 1be:	20 e0       	ldi	r18, 0x00	; 0
 1c0:	30 e0       	ldi	r19, 0x00	; 0
		while(str[j]==0) j++;
 1c2:	ae 01       	movw	r20, r28
 1c4:	4f 5f       	subi	r20, 0xFF	; 255
 1c6:	5f 4f       	sbci	r21, 0xFF	; 255
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <LCDWriteInt+0x66>
 1ca:	2f 5f       	subi	r18, 0xFF	; 255
 1cc:	3f 4f       	sbci	r19, 0xFF	; 255
 1ce:	fa 01       	movw	r30, r20
 1d0:	e2 0f       	add	r30, r18
 1d2:	f3 1f       	adc	r31, r19
 1d4:	80 81       	ld	r24, Z
 1d6:	88 23       	and	r24, r24
 1d8:	c1 f3       	breq	.-16     	; 0x1ca <LCDWriteInt+0x62>
 1da:	04 c0       	rjmp	.+8      	; 0x1e4 <LCDWriteInt+0x7c>
	else
		j=5-field_length;
 1dc:	25 e0       	ldi	r18, 0x05	; 5
 1de:	30 e0       	ldi	r19, 0x00	; 0
 1e0:	20 1b       	sub	r18, r16
 1e2:	31 0b       	sbc	r19, r17
 1e4:	7e 01       	movw	r14, r28
 1e6:	08 94       	sec
 1e8:	e1 1c       	adc	r14, r1
 1ea:	f1 1c       	adc	r15, r1
 1ec:	e2 0e       	add	r14, r18
 1ee:	f3 1e       	adc	r15, r19
 1f0:	89 01       	movw	r16, r18
 1f2:	09 c0       	rjmp	.+18     	; 0x206 <LCDWriteInt+0x9e>

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 1f4:	f7 01       	movw	r30, r14
 1f6:	81 91       	ld	r24, Z+
 1f8:	7f 01       	movw	r14, r30
 1fa:	80 5d       	subi	r24, 0xD0	; 208
 1fc:	61 e0       	ldi	r22, 0x01	; 1
 1fe:	0e 94 72 00 	call	0xe4	; 0xe4 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 202:	0f 5f       	subi	r16, 0xFF	; 255
 204:	1f 4f       	sbci	r17, 0xFF	; 255
 206:	05 30       	cpi	r16, 0x05	; 5
 208:	11 05       	cpc	r17, r1
 20a:	a4 f3       	brlt	.-24     	; 0x1f4 <LCDWriteInt+0x8c>
	{
	LCDData(48+str[i]);
	}
}
 20c:	0f 90       	pop	r0
 20e:	0f 90       	pop	r0
 210:	0f 90       	pop	r0
 212:	0f 90       	pop	r0
 214:	0f 90       	pop	r0
 216:	cf 91       	pop	r28
 218:	df 91       	pop	r29
 21a:	1f 91       	pop	r17
 21c:	0f 91       	pop	r16
 21e:	ff 90       	pop	r15
 220:	ef 90       	pop	r14
 222:	08 95       	ret

00000224 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 	if(x>=20) return;
 224:	84 31       	cpi	r24, 0x14	; 20
 226:	78 f4       	brcc	.+30     	; 0x246 <LCDGotoXY+0x22>

	//16x2 LCD type
	
	switch(y)
 228:	62 30       	cpi	r22, 0x02	; 2
 22a:	31 f0       	breq	.+12     	; 0x238 <LCDGotoXY+0x14>
 22c:	63 30       	cpi	r22, 0x03	; 3
 22e:	31 f0       	breq	.+12     	; 0x23c <LCDGotoXY+0x18>
 230:	61 30       	cpi	r22, 0x01	; 1
 232:	29 f4       	brne	.+10     	; 0x23e <LCDGotoXY+0x1a>
	{
		case 0:
			break;
		case 1:
			x|=0b01000000;
 234:	80 64       	ori	r24, 0x40	; 64
 236:	03 c0       	rjmp	.+6      	; 0x23e <LCDGotoXY+0x1a>
			break;
		case 2:
			x+=0x14;
 238:	8c 5e       	subi	r24, 0xEC	; 236
 23a:	01 c0       	rjmp	.+2      	; 0x23e <LCDGotoXY+0x1a>
			break;
		case 3:
			x+=0x54;
 23c:	8c 5a       	subi	r24, 0xAC	; 172
			break;
	}

	x|=0b10000000;
  	LCDCmd(x);
 23e:	80 68       	ori	r24, 0x80	; 128
 240:	60 e0       	ldi	r22, 0x00	; 0
 242:	0e 94 72 00 	call	0xe4	; 0xe4 <LCDByte>
 246:	08 95       	ret

00000248 <LCDInit>:
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);

}

void LCDInit(uint8_t style)
{
 248:	1f 93       	push	r17
 24a:	cf 93       	push	r28
 24c:	df 93       	push	r29
 24e:	18 2f       	mov	r17, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 250:	88 e9       	ldi	r24, 0x98	; 152
 252:	9a e3       	ldi	r25, 0x3A	; 58
 254:	01 97       	sbiw	r24, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <LCDInit+0xc>
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
 258:	84 b3       	in	r24, 0x14	; 20
 25a:	80 6f       	ori	r24, 0xF0	; 240
 25c:	84 bb       	out	0x14, r24	; 20
	LCD_E_DDR|=(1<<LCD_E_POS);
 25e:	ba 9a       	sbi	0x17, 2	; 23
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 260:	b8 9a       	sbi	0x17, 0	; 23
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 262:	b9 9a       	sbi	0x17, 1	; 23

	LCD_DATA_PORT&=(~(0x0F<<LCD_DATA_POS));
 264:	85 b3       	in	r24, 0x15	; 21
 266:	8f 70       	andi	r24, 0x0F	; 15
 268:	85 bb       	out	0x15, r24	; 21
	CLEAR_E();
 26a:	c2 98       	cbi	0x18, 2	; 24
	CLEAR_RW();
 26c:	c1 98       	cbi	0x18, 1	; 24
	CLEAR_RS();
 26e:	c0 98       	cbi	0x18, 0	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	98 2f       	mov	r25, r24
 274:	9a 95       	dec	r25
 276:	f1 f7       	brne	.-4      	; 0x274 <LCDInit+0x2c>

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
 278:	c2 9a       	sbi	0x18, 2	; 24
	LCD_DATA_PORT|=((0b00000010)<<LCD_DATA_POS); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 27a:	ad 9a       	sbi	0x15, 5	; 21
 27c:	98 2f       	mov	r25, r24
 27e:	9a 95       	dec	r25
 280:	f1 f7       	brne	.-4      	; 0x27e <LCDInit+0x36>
	_delay_us(1);
	CLEAR_E();
 282:	c2 98       	cbi	0x18, 2	; 24
 284:	8a 95       	dec	r24
 286:	f1 f7       	brne	.-4      	; 0x284 <LCDInit+0x3c>
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 288:	0e 94 49 00 	call	0x92	; 0x92 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 28c:	81 2f       	mov	r24, r17
 28e:	8c 60       	ori	r24, 0x0C	; 12
 290:	60 e0       	ldi	r22, 0x00	; 0
 292:	0e 94 72 00 	call	0xe4	; 0xe4 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 296:	88 e2       	ldi	r24, 0x28	; 40
 298:	60 e0       	ldi	r22, 0x00	; 0
 29a:	0e 94 72 00 	call	0xe4	; 0xe4 <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);
 29e:	80 e4       	ldi	r24, 0x40	; 64
 2a0:	60 e0       	ldi	r22, 0x00	; 0
 2a2:	0e 94 72 00 	call	0xe4	; 0xe4 <LCDByte>
 2a6:	c9 e6       	ldi	r28, 0x69	; 105
 2a8:	d0 e0       	ldi	r29, 0x00	; 0

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
		LCDData(__cgram[__i]);
 2aa:	89 91       	ld	r24, Y+
 2ac:	61 e0       	ldi	r22, 0x01	; 1
 2ae:	0e 94 72 00 	call	0xe4	; 0xe4 <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	c1 3a       	cpi	r28, 0xA1	; 161
 2b6:	d8 07       	cpc	r29, r24
 2b8:	c1 f7       	brne	.-16     	; 0x2aa <LCDInit+0x62>
		LCDData(__cgram[__i]);
	
	LCDGotoXY(0,0);
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	60 e0       	ldi	r22, 0x00	; 0
 2c0:	70 e0       	ldi	r23, 0x00	; 0
 2c2:	0e 94 12 01 	call	0x224	; 0x224 <LCDGotoXY>

}
 2c6:	df 91       	pop	r29
 2c8:	cf 91       	pop	r28
 2ca:	1f 91       	pop	r17
 2cc:	08 95       	ret

000002ce <main>:
#include <avr/interrupt.h>
#include "lcd4bit.h"
unsigned int count;

main(void){
	DDRC=0xff;
 2ce:	8f ef       	ldi	r24, 0xFF	; 255
 2d0:	84 bb       	out	0x14, r24	; 20
	PORTC=0x00;
 2d2:	15 ba       	out	0x15, r1	; 21
	LCDInit(0);
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	0e 94 24 01 	call	0x248	; 0x248 <LCDInit>
	LCDClear();
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	60 e0       	ldi	r22, 0x00	; 0
 2de:	0e 94 72 00 	call	0xe4	; 0xe4 <LCDByte>
	MCUCR=(1<<ISC01)|(1<<ISC00);
 2e2:	83 e0       	ldi	r24, 0x03	; 3
 2e4:	85 bf       	out	0x35, r24	; 53
	GICR=(1<<INT0);
 2e6:	80 e4       	ldi	r24, 0x40	; 64
 2e8:	8b bf       	out	0x3b, r24	; 59
	sei();
 2ea:	78 94       	sei
	
	while(1){
		LCDWriteStringXY(2,1,"Count = ");
 2ec:	82 e0       	ldi	r24, 0x02	; 2
 2ee:	61 e0       	ldi	r22, 0x01	; 1
 2f0:	0e 94 12 01 	call	0x224	; 0x224 <LCDGotoXY>
 2f4:	80 e6       	ldi	r24, 0x60	; 96
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	0e 94 9a 00 	call	0x134	; 0x134 <LCDWriteString>
		LCDWriteIntXY(2,0,count,3);
 2fc:	82 e0       	ldi	r24, 0x02	; 2
 2fe:	60 e0       	ldi	r22, 0x00	; 0
 300:	0e 94 12 01 	call	0x224	; 0x224 <LCDGotoXY>
 304:	80 91 a2 00 	lds	r24, 0x00A2
 308:	90 91 a3 00 	lds	r25, 0x00A3
 30c:	63 e0       	ldi	r22, 0x03	; 3
 30e:	70 e0       	ldi	r23, 0x00	; 0
 310:	0e 94 b4 00 	call	0x168	; 0x168 <LCDWriteInt>
 314:	eb cf       	rjmp	.-42     	; 0x2ec <main+0x1e>

00000316 <__vector_1>:
	}
}


ISR(INT0_vect){
 316:	1f 92       	push	r1
 318:	0f 92       	push	r0
 31a:	0f b6       	in	r0, 0x3f	; 63
 31c:	0f 92       	push	r0
 31e:	11 24       	eor	r1, r1
 320:	2f 93       	push	r18
 322:	3f 93       	push	r19
 324:	4f 93       	push	r20
 326:	5f 93       	push	r21
 328:	6f 93       	push	r22
 32a:	7f 93       	push	r23
 32c:	8f 93       	push	r24
 32e:	9f 93       	push	r25
 330:	af 93       	push	r26
 332:	bf 93       	push	r27
 334:	ef 93       	push	r30
 336:	ff 93       	push	r31
	PORTC=0xff;
 338:	8f ef       	ldi	r24, 0xFF	; 255
 33a:	85 bb       	out	0x15, r24	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 33c:	88 e8       	ldi	r24, 0x88	; 136
 33e:	93 e1       	ldi	r25, 0x13	; 19
 340:	01 97       	sbiw	r24, 0x01	; 1
 342:	f1 f7       	brne	.-4      	; 0x340 <__vector_1+0x2a>
	_delay_ms(10);
	PORTC=0x00;
 344:	15 ba       	out	0x15, r1	; 21
	count++;
 346:	80 91 a2 00 	lds	r24, 0x00A2
 34a:	90 91 a3 00 	lds	r25, 0x00A3
 34e:	01 96       	adiw	r24, 0x01	; 1
 350:	90 93 a3 00 	sts	0x00A3, r25
 354:	80 93 a2 00 	sts	0x00A2, r24
	LCDClear();
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	60 e0       	ldi	r22, 0x00	; 0
 35c:	0e 94 72 00 	call	0xe4	; 0xe4 <LCDByte>
 360:	ff 91       	pop	r31
 362:	ef 91       	pop	r30
 364:	bf 91       	pop	r27
 366:	af 91       	pop	r26
 368:	9f 91       	pop	r25
 36a:	8f 91       	pop	r24
 36c:	7f 91       	pop	r23
 36e:	6f 91       	pop	r22
 370:	5f 91       	pop	r21
 372:	4f 91       	pop	r20
 374:	3f 91       	pop	r19
 376:	2f 91       	pop	r18
 378:	0f 90       	pop	r0
 37a:	0f be       	out	0x3f, r0	; 63
 37c:	0f 90       	pop	r0
 37e:	1f 90       	pop	r1
 380:	18 95       	reti

00000382 <__divmodhi4>:
 382:	97 fb       	bst	r25, 7
 384:	09 2e       	mov	r0, r25
 386:	07 26       	eor	r0, r23
 388:	0a d0       	rcall	.+20     	; 0x39e <__divmodhi4_neg1>
 38a:	77 fd       	sbrc	r23, 7
 38c:	04 d0       	rcall	.+8      	; 0x396 <__divmodhi4_neg2>
 38e:	0c d0       	rcall	.+24     	; 0x3a8 <__udivmodhi4>
 390:	06 d0       	rcall	.+12     	; 0x39e <__divmodhi4_neg1>
 392:	00 20       	and	r0, r0
 394:	1a f4       	brpl	.+6      	; 0x39c <__divmodhi4_exit>

00000396 <__divmodhi4_neg2>:
 396:	70 95       	com	r23
 398:	61 95       	neg	r22
 39a:	7f 4f       	sbci	r23, 0xFF	; 255

0000039c <__divmodhi4_exit>:
 39c:	08 95       	ret

0000039e <__divmodhi4_neg1>:
 39e:	f6 f7       	brtc	.-4      	; 0x39c <__divmodhi4_exit>
 3a0:	90 95       	com	r25
 3a2:	81 95       	neg	r24
 3a4:	9f 4f       	sbci	r25, 0xFF	; 255
 3a6:	08 95       	ret

000003a8 <__udivmodhi4>:
 3a8:	aa 1b       	sub	r26, r26
 3aa:	bb 1b       	sub	r27, r27
 3ac:	51 e1       	ldi	r21, 0x11	; 17
 3ae:	07 c0       	rjmp	.+14     	; 0x3be <__udivmodhi4_ep>

000003b0 <__udivmodhi4_loop>:
 3b0:	aa 1f       	adc	r26, r26
 3b2:	bb 1f       	adc	r27, r27
 3b4:	a6 17       	cp	r26, r22
 3b6:	b7 07       	cpc	r27, r23
 3b8:	10 f0       	brcs	.+4      	; 0x3be <__udivmodhi4_ep>
 3ba:	a6 1b       	sub	r26, r22
 3bc:	b7 0b       	sbc	r27, r23

000003be <__udivmodhi4_ep>:
 3be:	88 1f       	adc	r24, r24
 3c0:	99 1f       	adc	r25, r25
 3c2:	5a 95       	dec	r21
 3c4:	a9 f7       	brne	.-22     	; 0x3b0 <__udivmodhi4_loop>
 3c6:	80 95       	com	r24
 3c8:	90 95       	com	r25
 3ca:	bc 01       	movw	r22, r24
 3cc:	cd 01       	movw	r24, r26
 3ce:	08 95       	ret

000003d0 <_exit>:
 3d0:	f8 94       	cli

000003d2 <__stop_program>:
 3d2:	ff cf       	rjmp	.-2      	; 0x3d2 <__stop_program>
