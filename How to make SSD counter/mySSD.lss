
mySSD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001aa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  000001aa  0000021e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000046  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001ab  00000000  00000000  00000296  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000123  00000000  00000000  00000441  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000019c  00000000  00000000  00000564  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  00000700  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000c2  00000000  00000000  00000740  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000068  00000000  00000000  00000802  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  0000086a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ea       	ldi	r30, 0xAA	; 170
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 b9 00 	call	0x172	; 0x172 <main>
  7a:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <decodeSSD>:
		
	}

}

void decodeSSD(unsigned int val){
  82:	9c 01       	movw	r18, r24
	dig[3]=val%10;
  84:	6a e0       	ldi	r22, 0x0A	; 10
  86:	70 e0       	ldi	r23, 0x00	; 0
  88:	0e 94 bf 00 	call	0x17e	; 0x17e <__udivmodhi4>
  8c:	90 93 71 00 	sts	0x0071, r25
  90:	80 93 70 00 	sts	0x0070, r24
	dig[2]=(val%100)/10;
  94:	c9 01       	movw	r24, r18
  96:	64 e6       	ldi	r22, 0x64	; 100
  98:	70 e0       	ldi	r23, 0x00	; 0
  9a:	0e 94 bf 00 	call	0x17e	; 0x17e <__udivmodhi4>
  9e:	6a e0       	ldi	r22, 0x0A	; 10
  a0:	70 e0       	ldi	r23, 0x00	; 0
  a2:	0e 94 bf 00 	call	0x17e	; 0x17e <__udivmodhi4>
  a6:	70 93 6f 00 	sts	0x006F, r23
  aa:	60 93 6e 00 	sts	0x006E, r22
	dig[1]=(val%1000)/100;
  ae:	c9 01       	movw	r24, r18
  b0:	68 ee       	ldi	r22, 0xE8	; 232
  b2:	73 e0       	ldi	r23, 0x03	; 3
  b4:	0e 94 bf 00 	call	0x17e	; 0x17e <__udivmodhi4>
  b8:	64 e6       	ldi	r22, 0x64	; 100
  ba:	70 e0       	ldi	r23, 0x00	; 0
  bc:	0e 94 bf 00 	call	0x17e	; 0x17e <__udivmodhi4>
  c0:	70 93 6d 00 	sts	0x006D, r23
  c4:	60 93 6c 00 	sts	0x006C, r22
	dig[0]=(val%10000)/1000;
  c8:	c9 01       	movw	r24, r18
  ca:	60 e1       	ldi	r22, 0x10	; 16
  cc:	77 e2       	ldi	r23, 0x27	; 39
  ce:	0e 94 bf 00 	call	0x17e	; 0x17e <__udivmodhi4>
  d2:	68 ee       	ldi	r22, 0xE8	; 232
  d4:	73 e0       	ldi	r23, 0x03	; 3
  d6:	0e 94 bf 00 	call	0x17e	; 0x17e <__udivmodhi4>
  da:	70 93 6b 00 	sts	0x006B, r23
  de:	60 93 6a 00 	sts	0x006A, r22
}
  e2:	08 95       	ret

000000e4 <countUp>:
		countUp();
	
	}
}

void countUp(void){
  e4:	af 92       	push	r10
  e6:	bf 92       	push	r11
  e8:	cf 92       	push	r12
  ea:	df 92       	push	r13
  ec:	ef 92       	push	r14
  ee:	ff 92       	push	r15
  f0:	0f 93       	push	r16
  f2:	1f 93       	push	r17
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
  f8:	00 e0       	ldi	r16, 0x00	; 0
  fa:	10 e0       	ldi	r17, 0x00	; 0
	for(int j=0;j<10000;j++){
		for(int i=0;i<4;i++){
			PORTA=(1<<i+4);
  fc:	21 e0       	ldi	r18, 0x01	; 1
  fe:	a2 2e       	mov	r10, r18
 100:	b1 2c       	mov	r11, r1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 102:	90 ed       	ldi	r25, 0xD0	; 208
 104:	c9 2e       	mov	r12, r25
 106:	97 e0       	ldi	r25, 0x07	; 7
 108:	d9 2e       	mov	r13, r25
 10a:	21 c0       	rjmp	.+66     	; 0x14e <countUp+0x6a>
 10c:	c5 01       	movw	r24, r10
 10e:	0c 2e       	mov	r0, r28
 110:	02 c0       	rjmp	.+4      	; 0x116 <countUp+0x32>
 112:	88 0f       	add	r24, r24
 114:	99 1f       	adc	r25, r25
 116:	0a 94       	dec	r0
 118:	e2 f7       	brpl	.-8      	; 0x112 <countUp+0x2e>
 11a:	8b bb       	out	0x1b, r24	; 27
			decodeSSD(j);
 11c:	c8 01       	movw	r24, r16
 11e:	0e 94 41 00 	call	0x82	; 0x82 <decodeSSD>
			PORTC=nums[dig[i]];
 122:	d7 01       	movw	r26, r14
 124:	ed 91       	ld	r30, X+
 126:	fd 91       	ld	r31, X+
 128:	7d 01       	movw	r14, r26
 12a:	e0 5a       	subi	r30, 0xA0	; 160
 12c:	ff 4f       	sbci	r31, 0xFF	; 255
 12e:	80 81       	ld	r24, Z
 130:	85 bb       	out	0x15, r24	; 21
 132:	c6 01       	movw	r24, r12
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <countUp+0x50>
			_delay_ms(1);
			PORTC=0x00;
 138:	15 ba       	out	0x15, r1	; 21
 13a:	21 96       	adiw	r28, 0x01	; 1
	}
}

void countUp(void){
	for(int j=0;j<10000;j++){
		for(int i=0;i<4;i++){
 13c:	c8 30       	cpi	r28, 0x08	; 8
 13e:	d1 05       	cpc	r29, r1
 140:	29 f7       	brne	.-54     	; 0x10c <countUp+0x28>
	
	}
}

void countUp(void){
	for(int j=0;j<10000;j++){
 142:	0f 5f       	subi	r16, 0xFF	; 255
 144:	1f 4f       	sbci	r17, 0xFF	; 255
 146:	b7 e2       	ldi	r27, 0x27	; 39
 148:	00 31       	cpi	r16, 0x10	; 16
 14a:	1b 07       	cpc	r17, r27
 14c:	39 f0       	breq	.+14     	; 0x15c <countUp+0x78>
 14e:	8a e6       	ldi	r24, 0x6A	; 106
 150:	e8 2e       	mov	r14, r24
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	f8 2e       	mov	r15, r24
 156:	c4 e0       	ldi	r28, 0x04	; 4
 158:	d0 e0       	ldi	r29, 0x00	; 0
 15a:	d8 cf       	rjmp	.-80     	; 0x10c <countUp+0x28>
			PORTC=0x00;
		}
		
	}

}
 15c:	df 91       	pop	r29
 15e:	cf 91       	pop	r28
 160:	1f 91       	pop	r17
 162:	0f 91       	pop	r16
 164:	ff 90       	pop	r15
 166:	ef 90       	pop	r14
 168:	df 90       	pop	r13
 16a:	cf 90       	pop	r12
 16c:	bf 90       	pop	r11
 16e:	af 90       	pop	r10
 170:	08 95       	ret

00000172 <main>:
unsigned int dig[]={1,2,3,4}; // declare an array to store a value in a digit.
void countUp(void);   // Increasing the ssd value
void decodeSSD(unsigned int val);  // this method separates given number and store it as digit wise.

main(void){
	DDRC=0xff;
 172:	8f ef       	ldi	r24, 0xFF	; 255
 174:	84 bb       	out	0x14, r24	; 20
	DDRA=0xff;
 176:	8a bb       	out	0x1a, r24	; 26
	
	while(1){
		countUp();
 178:	0e 94 72 00 	call	0xe4	; 0xe4 <countUp>
 17c:	fd cf       	rjmp	.-6      	; 0x178 <main+0x6>

0000017e <__udivmodhi4>:
 17e:	aa 1b       	sub	r26, r26
 180:	bb 1b       	sub	r27, r27
 182:	51 e1       	ldi	r21, 0x11	; 17
 184:	07 c0       	rjmp	.+14     	; 0x194 <__udivmodhi4_ep>

00000186 <__udivmodhi4_loop>:
 186:	aa 1f       	adc	r26, r26
 188:	bb 1f       	adc	r27, r27
 18a:	a6 17       	cp	r26, r22
 18c:	b7 07       	cpc	r27, r23
 18e:	10 f0       	brcs	.+4      	; 0x194 <__udivmodhi4_ep>
 190:	a6 1b       	sub	r26, r22
 192:	b7 0b       	sbc	r27, r23

00000194 <__udivmodhi4_ep>:
 194:	88 1f       	adc	r24, r24
 196:	99 1f       	adc	r25, r25
 198:	5a 95       	dec	r21
 19a:	a9 f7       	brne	.-22     	; 0x186 <__udivmodhi4_loop>
 19c:	80 95       	com	r24
 19e:	90 95       	com	r25
 1a0:	bc 01       	movw	r22, r24
 1a2:	cd 01       	movw	r24, r26
 1a4:	08 95       	ret

000001a6 <_exit>:
 1a6:	f8 94       	cli

000001a8 <__stop_program>:
 1a8:	ff cf       	rjmp	.-2      	; 0x1a8 <__stop_program>
