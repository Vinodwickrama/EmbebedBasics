
myADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000196  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00000196  0000022a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800072  00800072  0000023c  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000070  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001eb  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000158  00000000  00000000  000004b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001f4  00000000  00000000  0000060f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  00000804  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000e0  00000000  00000000  00000864  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000028  00000000  00000000  00000944  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  0000096c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e9       	ldi	r30, 0x96	; 150
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e7       	ldi	r26, 0x72	; 114
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 37       	cpi	r26, 0x74	; 116
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ad 00 	call	0x15a	; 0x15a <main>
  8a:	0c 94 c9 00 	jmp	0x192	; 0x192 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <decodeSSD>:
	}
}



void decodeSSD(unsigned int val){
  92:	9c 01       	movw	r18, r24
	dig[3]=val%10;
  94:	6a e0       	ldi	r22, 0x0A	; 10
  96:	70 e0       	ldi	r23, 0x00	; 0
  98:	0e 94 b5 00 	call	0x16a	; 0x16a <__udivmodhi4>
  9c:	90 93 71 00 	sts	0x0071, r25
  a0:	80 93 70 00 	sts	0x0070, r24
	dig[2]=(val%100)/10;
  a4:	c9 01       	movw	r24, r18
  a6:	64 e6       	ldi	r22, 0x64	; 100
  a8:	70 e0       	ldi	r23, 0x00	; 0
  aa:	0e 94 b5 00 	call	0x16a	; 0x16a <__udivmodhi4>
  ae:	6a e0       	ldi	r22, 0x0A	; 10
  b0:	70 e0       	ldi	r23, 0x00	; 0
  b2:	0e 94 b5 00 	call	0x16a	; 0x16a <__udivmodhi4>
  b6:	70 93 6f 00 	sts	0x006F, r23
  ba:	60 93 6e 00 	sts	0x006E, r22
	dig[1]=(val%1000)/100;
  be:	c9 01       	movw	r24, r18
  c0:	68 ee       	ldi	r22, 0xE8	; 232
  c2:	73 e0       	ldi	r23, 0x03	; 3
  c4:	0e 94 b5 00 	call	0x16a	; 0x16a <__udivmodhi4>
  c8:	64 e6       	ldi	r22, 0x64	; 100
  ca:	70 e0       	ldi	r23, 0x00	; 0
  cc:	0e 94 b5 00 	call	0x16a	; 0x16a <__udivmodhi4>
  d0:	70 93 6d 00 	sts	0x006D, r23
  d4:	60 93 6c 00 	sts	0x006C, r22
	dig[0]=(val%10000)/1000;
  d8:	c9 01       	movw	r24, r18
  da:	60 e1       	ldi	r22, 0x10	; 16
  dc:	77 e2       	ldi	r23, 0x27	; 39
  de:	0e 94 b5 00 	call	0x16a	; 0x16a <__udivmodhi4>
  e2:	68 ee       	ldi	r22, 0xE8	; 232
  e4:	73 e0       	ldi	r23, 0x03	; 3
  e6:	0e 94 b5 00 	call	0x16a	; 0x16a <__udivmodhi4>
  ea:	70 93 6b 00 	sts	0x006B, r23
  ee:	60 93 6a 00 	sts	0x006A, r22
}
  f2:	08 95       	ret

000000f4 <initDDR>:


void initDDR(void){
	DDRC=0xff;
  f4:	8f ef       	ldi	r24, 0xFF	; 255
  f6:	84 bb       	out	0x14, r24	; 20
	DDRA=(0<<PA0)|(1<<PA4)|(1<<PA5)|(1<<PA6)|(1<<PA7);
  f8:	80 ef       	ldi	r24, 0xF0	; 240
  fa:	8a bb       	out	0x1a, r24	; 26
}
  fc:	08 95       	ret

000000fe <displaySSD>:
	
	
}


void displaySSD(void){
  fe:	aa e6       	ldi	r26, 0x6A	; 106
 100:	b0 e0       	ldi	r27, 0x00	; 0
 102:	24 e0       	ldi	r18, 0x04	; 4
 104:	30 e0       	ldi	r19, 0x00	; 0
	for(int i=0;i<4;i++){
			PORTA=(1<<i+4);
 106:	61 e0       	ldi	r22, 0x01	; 1
 108:	70 e0       	ldi	r23, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 10a:	40 ed       	ldi	r20, 0xD0	; 208
 10c:	57 e0       	ldi	r21, 0x07	; 7
 10e:	cb 01       	movw	r24, r22
 110:	02 2e       	mov	r0, r18
 112:	02 c0       	rjmp	.+4      	; 0x118 <displaySSD+0x1a>
 114:	88 0f       	add	r24, r24
 116:	99 1f       	adc	r25, r25
 118:	0a 94       	dec	r0
 11a:	e2 f7       	brpl	.-8      	; 0x114 <displaySSD+0x16>
 11c:	8b bb       	out	0x1b, r24	; 27
			PORTC=nums[dig[i]];
 11e:	ed 91       	ld	r30, X+
 120:	fd 91       	ld	r31, X+
 122:	e0 5a       	subi	r30, 0xA0	; 160
 124:	ff 4f       	sbci	r31, 0xFF	; 255
 126:	80 81       	ld	r24, Z
 128:	85 bb       	out	0x15, r24	; 21
 12a:	ca 01       	movw	r24, r20
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <displaySSD+0x2e>
			_delay_ms(1);
			PORTC=0x00;
 130:	15 ba       	out	0x15, r1	; 21
 132:	2f 5f       	subi	r18, 0xFF	; 255
 134:	3f 4f       	sbci	r19, 0xFF	; 255
	
}


void displaySSD(void){
	for(int i=0;i<4;i++){
 136:	28 30       	cpi	r18, 0x08	; 8
 138:	31 05       	cpc	r19, r1
 13a:	49 f7       	brne	.-46     	; 0x10e <displaySSD+0x10>
			PORTA=(1<<i+4);
			PORTC=nums[dig[i]];
			_delay_ms(1);
			PORTC=0x00;
		}
}
 13c:	08 95       	ret

0000013e <readAnalog>:
	DDRC=0xff;
	DDRA=(0<<PA0)|(1<<PA4)|(1<<PA5)|(1<<PA6)|(1<<PA7);
}

void readAnalog(void){
	ADMUX=(1<<REFS0);
 13e:	80 e4       	ldi	r24, 0x40	; 64
 140:	87 b9       	out	0x07, r24	; 7
	ADCSRA=(1<<ADEN)|(1<<ADATE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 142:	87 ea       	ldi	r24, 0xA7	; 167
 144:	86 b9       	out	0x06, r24	; 6
	ADCSRA=ADCSRA|(1<<ADSC);
 146:	36 9a       	sbi	0x06, 6	; 6
	while(!(ADCSRA&(1<<ADSC))){}
 148:	36 9b       	sbis	0x06, 6	; 6
 14a:	fe cf       	rjmp	.-4      	; 0x148 <readAnalog+0xa>
	decodeSSD(ADC);
 14c:	84 b1       	in	r24, 0x04	; 4
 14e:	95 b1       	in	r25, 0x05	; 5
 150:	0e 94 49 00 	call	0x92	; 0x92 <decodeSSD>
	displaySSD();
 154:	0e 94 7f 00 	call	0xfe	; 0xfe <displaySSD>
	
	
}
 158:	08 95       	ret

0000015a <main>:
	dig[0]=(val%10000)/1000;
}


void initDDR(void){
	DDRC=0xff;
 15a:	8f ef       	ldi	r24, 0xFF	; 255
 15c:	84 bb       	out	0x14, r24	; 20
	DDRA=(0<<PA0)|(1<<PA4)|(1<<PA5)|(1<<PA6)|(1<<PA7);
 15e:	80 ef       	ldi	r24, 0xF0	; 240
 160:	8a bb       	out	0x1a, r24	; 26


main(void){
	initDDR();
	while(1){
		PORTA=(0<<PA0);
 162:	1b ba       	out	0x1b, r1	; 27
		readAnalog();
 164:	0e 94 9f 00 	call	0x13e	; 0x13e <readAnalog>
 168:	fc cf       	rjmp	.-8      	; 0x162 <main+0x8>

0000016a <__udivmodhi4>:
 16a:	aa 1b       	sub	r26, r26
 16c:	bb 1b       	sub	r27, r27
 16e:	51 e1       	ldi	r21, 0x11	; 17
 170:	07 c0       	rjmp	.+14     	; 0x180 <__udivmodhi4_ep>

00000172 <__udivmodhi4_loop>:
 172:	aa 1f       	adc	r26, r26
 174:	bb 1f       	adc	r27, r27
 176:	a6 17       	cp	r26, r22
 178:	b7 07       	cpc	r27, r23
 17a:	10 f0       	brcs	.+4      	; 0x180 <__udivmodhi4_ep>
 17c:	a6 1b       	sub	r26, r22
 17e:	b7 0b       	sbc	r27, r23

00000180 <__udivmodhi4_ep>:
 180:	88 1f       	adc	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	5a 95       	dec	r21
 186:	a9 f7       	brne	.-22     	; 0x172 <__udivmodhi4_loop>
 188:	80 95       	com	r24
 18a:	90 95       	com	r25
 18c:	bc 01       	movw	r22, r24
 18e:	cd 01       	movw	r24, r26
 190:	08 95       	ret

00000192 <_exit>:
 192:	f8 94       	cli

00000194 <__stop_program>:
 194:	ff cf       	rjmp	.-2      	; 0x194 <__stop_program>
